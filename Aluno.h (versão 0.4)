#ifndef ALUNO_H
#define ALUNO_H

typedef struct data {
	short dia;
	short mes;
	short ano;
} Data;

typedef struct endereco{
	char estado[51];
	char cidade[51];
	char bairro[32];
	char rua[81];
	char comp[32];
} Endereco;

typedef struct aluno Aluno;
   typedef enum {

         ALN_CondRetOK = 0 ,
               /* Executou correto */

         ALN_CondRetAlunoNaoExiste = 1 ,
               /* O aluno não existe */

        ALN_CondRetDataInválida = 2 ,
               /* Data inserida foi inválida */

         ALN_CondRetFaltouMemoria = 3
               /* Faltou memória ao alocar dados */

   } ARV_tpCondRet ;


typedef struct aluno Aluno;

//Função para criar um único aluno. Recebe as informações como parâmetros e retorna o aluno criado.
ALN_tpCondRet CriaAluno(Aluno *a, char *nome, int mat, int cpf, int telefone, Data *nasc, Endereco* end);

/*Função para deletar um aluno. Recebe o endereço de memória (ponteiro) de um aluno e o deleta (apaga da memória).*/
void deletaAluno (Aluno* a);

/*Função para pegar a matrícula de um aluno. Recebe o endereço de memória (ponteiro) de um aluno e retorna sua matrícula por referência (em um ponteiro). */
ALN_tpCondRet GetMat (Aluno *a, int *mat);

/*Função para pegar o nome de um aluno. Recebe o endereço de memória (ponteiro) de um aluno e retorna seu nome por referência (em um ponteiro)*/
ALN_tpCondRet GetNome (Aluno *a, char* nome);

// Altera os dados de um aluno, caso eles sejam diferente de NULL / 0 (Zero).Caso um dado não necessite ser alterado, passar 0 / NULL como parâmetro.
ALN_tpCondRet AlteraDados(Aluno *aluno, char *nome, int mat, int cpf, int telefone, Data *nasc, Endereco* end);

/* Função interna para validar uma data.
Considera a data atual do sistema como data limite.
Valida verificando o número de dias por mês, p. ex. O dia 31 de setembro não é válido. */
ALN_tpCondRet ValidaData (Data* data);

#endif
