#include "aluno.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

struct aluno {
	char nome[81];
	int mat;
	int cpf;
	int telefone;
	Data nasc;
	Endereco end;
};

/*Recebe um ponteiro para aluno e desaloca o espaço de memória apontado pelo mesmo*/
void deletaAluno (Aluno* a) {
	free(a);
}

/*Recebe um ponteiro para aluno e outro para um inteiro e retorna a matrícula do aluno pelo ponteiro para inteiro.*/
ALN_tpCondRet GetMat (Aluno *a, int *mat) {
	if(a==NULL){
		return ALN_CondRetAlunoNaoExiste;
	}
	*mat = a->mat;
	return ALN_CondRetOK;
}
/*Recebe um ponteiro para aluno e outro para um char e retorna o nome do aluno pelo ponteiro para char.*/
ALN_tpCondRet GetNome (Aluno *a, char* nome) {
	if(a==NULL){
		return ALN_CondRetAlunoNaoExiste;
	}
	strcpy(nome, a->nome);
	return ALN_CondRetOK;
}

//Cria um aluno com os dados passados por passado por referencia.
ALN_tpCondRet CriaAluno(Aluno *a, char *nome, int mat, int cpf, int telefone, Data *nasc, Endereco* end ) {
	a = (Aluno*)malloc(sizeof(Aluno));

	if (a == NULL) {
		return ALN_CondRetFaltouMemoria;
	}

	strcpy(a->nome, nome);
	a->mat = mat;
	a->cpf = cpf;
	a->telefone = telefone;
	a->nasc.dia = nasc->dia;
	a->nasc.mes = nasc->mes;
	a->nasc.ano = nasc->ano;
	strcpy(a->end.bairro,end->bairro);
	strcpy(a->end.cidade,end->cidade);
	strcpy(a->end.comp,end->comp);
	strcpy(a->end.estado,end->estado);
	strcpy(a->end.rua,end->rua);

	return ALN_CondRetOK;
}
// Altera os dados de um aluno, caso eles sejam diferente de NULL / 0 (Zero).
ALN_tpCondRet AlteraDados(Aluno *aluno, char *nome, int mat, int cpf, int telefone, Data *nasc, Endereco* end) {

	if (nome)
		strcpy(aluno->nome,nome);
	if (mat)
		aluno->mat = mat;
	if (cpf)
		aluno->cpf = cpf;
	if (telefone)
		aluno->telefone = telefone;
	if (nasc && ValidaData(&nasc)) {
		aluno->nasc.ano = nasc->ano;
		aluno->nasc.mes = nasc->mes;
		aluno->nasc.dia = nasc->dia;
	}
	if (end) {
		strcpy(aluno->end.estado, end->estado);
		strcpy(aluno->end.cidade, end->cidade);
		strcpy(aluno->end.bairro, end->bairro);
		strcpy(aluno->end.rua, end->rua);
		strcpy(aluno->end.comp, end->comp);
	}

	return ALN_CondRetOK;
}

/* Função interna para validar uma data.
Considera a data atual do sistema como data limite.
Valida verificando o número de dias por mês, p. ex. O dia 31 de setembro não é válido. */
ALN_tpCondRet ValidaData (Data* data) {

	time_t t = time(NULL);
	struct tm *time = localtime(&t);
	char meses31[7] = {1,3,5,7,8,10,12};
	char meses30[4] = {4,6,9,11};
	int i;

	if ((data->dia < time->tm_mday && data->mes < (time->tm_mon + 1)) && data->ano < (time->tm_year + 1900))
	{
		for (i = 0; i < 7; i++) {
			if (data->mes == meses31[i])
				if (data->dia <= 31)
					return ALN_tpCondRetOK;
		}
		for (i = 0; i < 4; i++) {
			if (data->mes == meses30[i])
				if (data->dia <= 30)
					return ALN_tpCondRetOK;
		}
		if (data->mes == 2)
			if (data->dia <= 28)
				return ALN_tpCondRetOK;
	}
	return  ALN_CondRetDataInválida;
}
